
#include <iostream>
#include <vector>
#include <map>
using namespace std;

struct tree{
    int data;
    struct tree *left;
    struct tree *right;
};

struct tree *newNode(int data){
    struct tree *newnode = (struct tree *)malloc(sizeof(struct tree));
    newnode->data = data;
    newnode->left = NULL;
    newnode->right = NULL;
    return newnode;
}
void vdfromroot(struct tree *root, int vd, map<int, vector<int>> &m){
    if(root == NULL){
        return;
    }
    m[vd].push_back(root->data);
    vdfromroot(root->left,vd-1,m);
    vdfromroot(root->right,vd+1,m);
}

void printvertical(struct tree *root){
    
    map <int, vector <int>> m;
    vdfromroot(root,0,m);
    map <int, vector<int>> :: iterator itr;
    for(itr = m.begin(); itr != m.end(); itr++){
        for(int i = 0; i < itr->second.size(); ++i){
            printf(" %d",itr->second[i]);
        }
        printf("\n");
    }
}

int main(){
    struct tree *root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);
    root->right->left->right = newNode(8);
    root->right->right->right = newNode(9);
    printvertical(root);
    return 0;
}